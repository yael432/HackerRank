using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace queenAttack
{
    class Program
    {
        private static readonly Tuple<int, int>[] QueenDir =
        {
            Tuple.Create(-1, -1), Tuple.Create(-1, 1), Tuple.Create(1, -1),
            Tuple.Create(1, 1), Tuple.Create(-1, 0), Tuple.Create(1, 0),
            Tuple.Create(0, 1),Tuple.Create(0, -1)
        };

        static void Main(string[] args)
        {
            
            string[] tokens_n = Console.ReadLine().Split(' ');
            int n = Convert.ToInt32(tokens_n[0]);
            int k = Convert.ToInt32(tokens_n[1]);
            string[] tokens_rQueen = Console.ReadLine().Split(' ');
            int rQueen = Convert.ToInt32(tokens_rQueen[0]);
            int cQueen = Convert.ToInt32(tokens_rQueen[1]);

            int[] maxDisByDirection = new int[QueenDir.Length];

            //get max values
            for (int i = 0; i < QueenDir.Length; i++)
            {

                int lastRow = (QueenDir[i].Item1 >= 0) ? n : 1;
                int lastCol = (QueenDir[i].Item2 >= 0) ? n : 1;

                int disRow = Math.Abs(rQueen - lastRow);
                int disCol = Math.Abs(cQueen - lastCol);
                if (QueenDir[i].Item1 == 0)
                {
                    maxDisByDirection[i] = disCol;
                }
                else if (QueenDir[i].Item2 == 0)
                {
                    maxDisByDirection[i] = disRow;
                }
                else
                {
                    maxDisByDirection[i] = Math.Min(disCol, disRow);
                }
            }

            for (int a0 = 0; a0 < k; a0++)
            {
                string[] tokens_rObstacle = Console.ReadLine().Split(' ');
                int rObstacle = Convert.ToInt32(tokens_rObstacle[0]);
                int cObstacle = Convert.ToInt32(tokens_rObstacle[1]);
                // your code goes here

                Boolean isObstacleInQueenWay = false;
                for (int i = 0; i < QueenDir.Length; i++)
                {
                    int obsDistance = 0;
                    if (QueenDir[i].Item1 == 0) 
                    {
                        if (rObstacle == rQueen)
                        {
                            if (cObstacle < cQueen & QueenDir[i].Item2 == -1)
                            {
                                isObstacleInQueenWay = true;
                            }
                            else if (cObstacle > cQueen & QueenDir[i].Item2 == 1)
                            {
                                isObstacleInQueenWay = true;
                            }
                        }
                        obsDistance = Math.Abs(cObstacle -cQueen)-1;
                    }
                    else if (QueenDir[i].Item2 == 0)
                    {
                        if (cObstacle == cQueen)
                        {
                            if (rObstacle < rQueen & QueenDir[i].Item1 == -1)
                            {
                                isObstacleInQueenWay = true;
                            }
                            else if (rObstacle > rQueen & QueenDir[i].Item1 == 1)
                            {
                                isObstacleInQueenWay = true;
                            }
                        }
                        obsDistance = Math.Abs(rObstacle - rQueen) - 1;
                    }
                    else
                    {
                        if ((rObstacle < rQueen & QueenDir[i].Item1 == -1) || (rObstacle > rQueen & QueenDir[i].Item1 == 1))
                        {
                            if ((cObstacle < cQueen & QueenDir[i].Item2== -1) || (cObstacle > cQueen & QueenDir[i].Item2 == 1))
                            {
                                decimal slope = (decimal)(cObstacle - cQueen) / (decimal)(rObstacle - rQueen);

                                if (slope == QueenDir[i].Item2 / QueenDir[i].Item1) isObstacleInQueenWay = true;
                            }
                        }

                        int disRow = Math.Abs(rQueen - rObstacle);
                        int disCol = Math.Abs(cQueen - cObstacle);

                        obsDistance = Math.Min(disCol, disRow)-1;
                    }

                    if (isObstacleInQueenWay)
                    {
                        maxDisByDirection[i] = Math.Min(maxDisByDirection[i], obsDistance);
                        break;
                    }
                }

            }


            int answer = 0;
            for (int i = 0; i < QueenDir.Length; i++)
            {
                answer += maxDisByDirection[i];
            }

            Console.WriteLine(answer);
            
        }
    }
}
